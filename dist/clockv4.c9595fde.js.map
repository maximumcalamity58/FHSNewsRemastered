{"version":3,"sources":["js/clockv4.js"],"names":["countdown","endTime","now","Date","hasAdvanced","manualNavigation","timePeriodMapping","startTime","periodName","lunchTimings","currentPeriodIndex","getCurrentPeriodIndex","i","length","_timePeriodMapping$i$2","_slicedToArray","split","map","Number","endHours","endMinutes","potentialEndTime","setHours","to12HourFormat","timeStr","_timeStr$split$map2","hours","minutes","concat","initializeCountdown","document","getElementById","updatePeriod","tick","window","advanceToNextPeriod","advanceToPreviousPeriod","selectedLunchType","currentPeriodMapping","realCurrentPeriodIndex","_currentPeriodMapping2","startHours","startMinutes","setDate","getDate","_currentPeriodMapping4","lunchStartHours","lunchStartMinutes","lunchStartTime","_currentPeriodMapping6","lunchEndHours","lunchEndMinutes","_currentPeriodMapping8","_currentPeriodMapping10","textContent","_currentPeriodMapping12","periodStartTime","lunchButtons","classList","remove","add","updateProgressBar","gallery","innerHTML","dot","createElement","className","appendChild","periodEndTime","progressPercentage","style","width","updateClock","timeRemaining","Math","floor","seconds","_currentPeriodMapping14","requestAnimationFrame","chooseLunch","lunchType","buttonElement","allLunchButtons","querySelectorAll","contains","forEach","btn","addEventListener"],"mappings":"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","file":"clockv4.c9595fde.js","sourceRoot":"..","sourcesContent":["/**\r\n * @fileoverview This file updates the current time as a simple countdown.\r\n * @version August 25, 2023\r\n * @authors Maxime Hendryx-Parker\r\n **/\r\n\r\nvar countdown;\r\nvar now = new Date();\r\nvar endTime;\r\nlet hasAdvanced = false;  // Add this flag at the top of the file to track whether we have already advanced the period\r\nlet manualNavigation = false; // Flag to indicate manual navigation\r\n\r\nvar timePeriodMapping = [\r\n    { startTime: \"08:00\", endTime: \"08:30\", periodName: \"Passing Period\" },\r\n    { startTime: \"08:30\", endTime: \"09:53\", periodName: \"Period 1\" },\r\n    { startTime: \"09:53\", endTime: \"10:01\", periodName: \"Passing Period\" },\r\n    { startTime: \"10:01\", endTime: \"11:24\", periodName: \"Period 2\" },\r\n    { startTime: \"11:24\", endTime: \"13:24\", periodName: \"Period 3 & Lunch\" },\r\n    { startTime: \"13:24\", endTime: \"13:32\", periodName: \"Passing Period\" },\r\n    { startTime: \"13:32\", endTime: \"15:00\", periodName: \"Period 4\" }\r\n];\r\n\r\nvar lunchTimings = {\r\n    \"A\": { startTime: \"11:24\", endTime: \"11:54\", periodName: \"A Lunch\" },\r\n    \"B\": { startTime: \"11:54\", endTime: \"12:24\", periodName: \"B Lunch\" },\r\n    \"C\": { startTime: \"12:24\", endTime: \"12:54\", periodName: \"C Lunch\" },\r\n    \"D\": { startTime: \"12:54\", endTime: \"13:24\", periodName: \"D Lunch\" },\r\n};\r\n\r\n\r\n// At the top of the file\r\nlet currentPeriodIndex = getCurrentPeriodIndex();\r\n\r\nfunction getCurrentPeriodIndex() {\r\n    for (let i = 0; i < timePeriodMapping.length; i++) {\r\n        let [endHours, endMinutes] = timePeriodMapping[i].endTime.split(\":\").map(Number);\r\n        let potentialEndTime = new Date(now);\r\n        potentialEndTime.setHours(endHours, endMinutes, 0, 0);\r\n\r\n        if (now < potentialEndTime) {\r\n            return i;\r\n        }\r\n    }\r\n    return 0; // Default to the first period if no matching period found\r\n}\r\n\r\nfunction to12HourFormat(timeStr) {\r\n    let [hours, minutes] = timeStr.split(\":\").map(Number);\r\n    hours = hours % 12 || 12; // Convert 0 hours to 12 for 12 AM\r\n    minutes = minutes < 10 ? '0' + minutes : minutes;\r\n    return `${hours}:${minutes}`;\r\n}\r\n\r\nwindow.advanceToNextPeriod = function() {\r\n    manualNavigation = true;\r\n    if (currentPeriodIndex < timePeriodMapping.length - 1) {\r\n        currentPeriodIndex++;\r\n        updatePeriod();\r\n    }\r\n}\r\n\r\nwindow.advanceToPreviousPeriod = function() {\r\n    manualNavigation = true;\r\n    if (currentPeriodIndex > 0) {\r\n        currentPeriodIndex--;\r\n        updatePeriod();\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Initialize the countdown variables and start the tick function.\r\n */\r\nfunction initializeCountdown() {\r\n    countdown = document.getElementById(\"countdown__timer\");\r\n    now = new Date();\r\n    updatePeriod();\r\n    tick();\r\n}\r\n\r\nlet selectedLunchType = null; // This will store the type of lunch selected, if any\r\n\r\nfunction updatePeriod() {\r\n    let currentPeriodMapping = timePeriodMapping[currentPeriodIndex];\r\n\r\n    let realCurrentPeriodIndex = getCurrentPeriodIndex();\r\n\r\n    if (realCurrentPeriodIndex !== currentPeriodIndex) {\r\n        // If the period being looked at is not the current period, set endTime to startTime\r\n        let [startHours, startMinutes] = currentPeriodMapping.startTime.split(\":\").map(Number);\r\n        endTime = new Date(now);\r\n        endTime.setHours(startHours, startMinutes, 0, 0);\r\n    } else {\r\n        // Otherwise, set endTime to the actual end time of the period\r\n        endTime = new Date(now);\r\n        endTime.setHours(endHours, endMinutes, 0, 0);\r\n    }\r\n\r\n    // Check if the current time has surpassed the endTime\r\n    if (now > endTime) {\r\n        endTime.setDate(endTime.getDate() + 1);\r\n    }\r\n\r\n    if (currentPeriodMapping) {\r\n        // If current period is \"Period 3 & Lunch\"\r\n        if (currentPeriodMapping.periodName === \"Period 3 & Lunch\" && selectedLunchType) {\r\n            currentPeriodMapping = lunchTimings[selectedLunchType];\r\n\r\n            let [lunchStartHours, lunchStartMinutes] = currentPeriodMapping.startTime.split(\":\").map(Number);\r\n            let lunchStartTime = new Date(now);\r\n            lunchStartTime.setHours(lunchStartHours, lunchStartMinutes, 0, 0);\r\n\r\n            if (now < lunchStartTime) {\r\n                // If the selected lunch has not started, set endTime to its startTime\r\n                endTime = lunchStartTime;\r\n            } else {\r\n                // If the selected lunch has started, set endTime to its actual endTime\r\n                let [lunchEndHours, lunchEndMinutes] = currentPeriodMapping.endTime.split(\":\").map(Number);\r\n                endTime = new Date(now);\r\n                endTime.setHours(lunchEndHours, lunchEndMinutes, 0, 0);\r\n            }\r\n        } else {\r\n            let [endHours, endMinutes] = currentPeriodMapping.endTime.split(\":\").map(Number);\r\n            let [startHours, startMinutes] = currentPeriodMapping.startTime.split(\":\").map(Number);\r\n\r\n            if (realCurrentPeriodIndex !== currentPeriodIndex) {\r\n                // If the period being looked at is not the current period, set endTime to startTime\r\n                endTime = new Date(now);\r\n                endTime.setHours(startHours, startMinutes, 0, 0);\r\n            } else {\r\n                // Otherwise, set endTime to the actual end time of the period\r\n                endTime = new Date(now);\r\n                endTime.setHours(endHours, endMinutes, 0, 0);\r\n            }\r\n        }\r\n\r\n        document.getElementById(\"period__header\").textContent = currentPeriodMapping.periodName;\r\n        document.getElementById(\"period__time\").textContent = `${to12HourFormat(currentPeriodMapping.startTime)} - ${to12HourFormat(currentPeriodMapping.endTime)}`;\r\n\r\n        let [startHours, startMinutes] = currentPeriodMapping.startTime.split(\":\").map(Number);\r\n        let periodStartTime = new Date(now);\r\n        periodStartTime.setHours(startHours, startMinutes, 0, 0);\r\n\r\n        let lunchButtons = document.getElementById(\"lunch\");\r\n        if (currentPeriodMapping.periodName === \"Period 3 & Lunch\" || currentPeriodMapping === lunchTimings[selectedLunchType]) {\r\n            lunchButtons.classList.remove(\"hidden\");\r\n        } else {\r\n            lunchButtons.classList.add(\"hidden\");\r\n        }\r\n\r\n        updateProgressBar(periodStartTime, endTime);\r\n    } else {\r\n        endTime = new Date(now);\r\n        document.getElementById(\"period__header\").textContent = \"Not School Hours\";\r\n        document.getElementById(\"period__time\").textContent = \"\";\r\n    }\r\n\r\n    if (manualNavigation) {\r\n        if (now > endTime) {\r\n            endTime.setDate(endTime.getDate() + 1);\r\n        }\r\n        manualNavigation = false; // Reset the flag\r\n    }\r\n\r\n    // Update gallery dots\r\n    let gallery = document.getElementById(\"period__gallery\");\r\n    gallery.innerHTML = \"\"; // Clear existing dots\r\n\r\n    for (let i = 0; i < timePeriodMapping.length; i++) {\r\n        let dot = document.createElement(\"div\");\r\n        dot.className = \"gallery-dot\";\r\n\r\n        // Mark the active dot based on the current period\r\n        if (i === currentPeriodIndex) {\r\n            dot.classList.add(\"active\");\r\n        }\r\n\r\n        gallery.appendChild(dot);\r\n    }\r\n}\r\n\r\nfunction updateProgressBar(periodStartTime, periodEndTime) {\r\n    const totalDuration = periodEndTime - periodStartTime;\r\n    const elapsedDuration = now - periodStartTime;\r\n\r\n    // Calculate the percentage of time elapsed\r\n    const progressPercentage = (elapsedDuration / totalDuration) * 100;\r\n\r\n    // Set the width of the progress bar\r\n    document.getElementById(\"countdown__progress\").style.width = `${progressPercentage}%`;\r\n}\r\n\r\nwindow.chooseLunch = function(lunchType, buttonElement) {\r\n    // Get all lunch buttons\r\n    let allLunchButtons = document.querySelectorAll(\"#lunch__choose .container\");\r\n\r\n    // If the button clicked is already selected\r\n    if (buttonElement.classList.contains(\"selected\")) {\r\n        // Deselect the button\r\n        buttonElement.classList.remove(\"selected\");\r\n        // Reset the selected lunch type\r\n        selectedLunchType = null;\r\n    } else {\r\n        // If another button was previously selected, deselect it\r\n        allLunchButtons.forEach(btn => btn.classList.remove(\"selected\"));\r\n\r\n        // Mark the clicked button as selected\r\n        buttonElement.classList.add(\"selected\");\r\n        // Set the selected lunch type\r\n        selectedLunchType = lunchType;\r\n    }\r\n\r\n    // Update the period to reflect the changes\r\n    manualNavigation = true;\r\n    updatePeriod();\r\n}\r\n\r\n\r\n\r\n/**\r\n * updates the current time and countdown timer\r\n */\r\nfunction updateClock() {\r\n    now = new Date();\r\n    let timeRemaining = (endTime - now) / 1000; // in seconds\r\n\r\n    // Reset hasAdvanced flag if the time is not yet expired\r\n    if (timeRemaining > 0) {\r\n        hasAdvanced = false;\r\n    }\r\n\r\n    if (timeRemaining <= 0 && !hasAdvanced && !manualNavigation) {\r\n        // ... (existing logic to advance the period)\r\n        hasAdvanced = true;\r\n    }\r\n\r\n    // If the time has already expired and it's a manual navigation\r\n    if (timeRemaining <= 0 && manualNavigation) {\r\n        endTime.setDate(endTime.getDate() + 1);\r\n        timeRemaining = (endTime - now) / 1000;\r\n        manualNavigation = false; // Reset the flag\r\n    }\r\n\r\n    // Calculate hours, minutes, seconds\r\n    let hours = Math.floor(timeRemaining / 3600);\r\n    timeRemaining %= 3600;\r\n    let minutes = Math.floor(timeRemaining / 60);\r\n    let seconds = Math.floor(timeRemaining % 60);\r\n\r\n    // Display time\r\n    if (hours > 0) {\r\n        countdown.textContent = `${hours}:${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\r\n    } else {\r\n        countdown.textContent = `${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\r\n    }\r\n\r\n    // Update the progress bar\r\n    let currentPeriodMapping = timePeriodMapping[currentPeriodIndex];\r\n    if (currentPeriodMapping) {\r\n        let [startHours, startMinutes] = currentPeriodMapping.startTime.split(\":\").map(Number);\r\n        let periodStartTime = new Date(now);\r\n        periodStartTime.setHours(startHours, startMinutes, 0, 0);\r\n        updateProgressBar(periodStartTime, endTime);\r\n    }\r\n}\r\n\r\n\r\n// main loop\r\nfunction tick() {\r\n    updateClock();\r\n    requestAnimationFrame(tick);\r\n}\r\n\r\nwindow.addEventListener(\"DOMContentLoaded\", initializeCountdown);\r\n"]}