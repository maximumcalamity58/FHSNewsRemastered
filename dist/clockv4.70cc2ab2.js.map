{"version":3,"sources":["js/clockv4.js"],"names":["countdown","endTime","now","Date","currentPeriodIndex","hasStarted","timePeriodMapping","startTime","periodName","lunchTimings","getCurrentPeriodIndex","i","length","_timePeriodMapping$i$2","_slicedToArray","split","map","Number","startHours","startMinutes","_timePeriodMapping$i$4","endHours","endMinutes","potentialStartTime","setHours","potentialEndTime","to12HourFormat","timeStr","_timeStr$split$map2","hours","minutes","concat","initializeCountdown","document","getElementById","currentPeriodInfo","updatePeriod","tick","window","advanceToNextPeriod","advanceToPreviousPeriod","selectedLunchType","arguments","undefined","currentPeriodMapping","_currentPeriodMapping2","textContent","_currentPeriodMapping4","periodStartTime","lunchButtons","classList","remove","add","updateProgressBar","_currentPeriodMapping6","_currentPeriodMapping8","gallery","innerHTML","dot","createElement","className","appendChild","periodEndTime","progressPercentage","style","width","updateClock","timeRemaining","Math","floor","seconds","_currentPeriodMapping10","requestAnimationFrame","chooseLunch","lunchType","buttonElement","allLunchButtons","querySelectorAll","contains","forEach","btn","addEventListener"],"mappings":"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","file":"clockv4.70cc2ab2.js","sourceRoot":"..","sourcesContent":["/**\r\n * @fileoverview This file updates the current time as a simple countdown.\r\n * @version August 25, 2023\r\n * @authors Maxime Hendryx-Parker\r\n **/\r\n\r\nvar countdown;\r\nvar now = new Date();\r\nvar endTime;\r\nvar currentPeriodIndex = 0;\r\nvar hasStarted = true;\r\n\r\nvar timePeriodMapping = [\r\n    { startTime: \"08:00\", endTime: \"08:30\", periodName: \"Passing Period\" },\r\n    { startTime: \"08:30\", endTime: \"09:53\", periodName: \"Period 1\" },\r\n    { startTime: \"09:53\", endTime: \"10:01\", periodName: \"Passing Period\" },\r\n    { startTime: \"10:01\", endTime: \"11:24\", periodName: \"Period 2\" },\r\n    { startTime: \"11:24\", endTime: \"13:24\", periodName: \"Period 3 & Lunch\" },\r\n    { startTime: \"13:24\", endTime: \"13:32\", periodName: \"Passing Period\" },\r\n    { startTime: \"13:32\", endTime: \"15:00\", periodName: \"Period 4\" }\r\n];\r\n\r\nvar lunchTimings = {\r\n    \"A\": { startTime: \"11:24\", endTime: \"11:54\", periodName: \"A Lunch\" },\r\n    \"B\": { startTime: \"11:54\", endTime: \"12:24\", periodName: \"B Lunch\" },\r\n    \"C\": { startTime: \"12:24\", endTime: \"12:54\", periodName: \"C Lunch\" },\r\n    \"D\": { startTime: \"12:54\", endTime: \"13:24\", periodName: \"D Lunch\" },\r\n};\r\n\r\nfunction getCurrentPeriodIndex() {\r\n    let hasStarted = true;\r\n    for (let i = 0; i < timePeriodMapping.length; i++) {\r\n        let [startHours, startMinutes] = timePeriodMapping[i].startTime.split(\":\").map(Number);\r\n        let [endHours, endMinutes] = timePeriodMapping[i].endTime.split(\":\").map(Number);\r\n\r\n        let potentialStartTime = new Date(now);\r\n        potentialStartTime.setHours(startHours, startMinutes, 0, 0);\r\n\r\n        let potentialEndTime = new Date(now);\r\n        potentialEndTime.setHours(endHours, endMinutes, 0, 0);\r\n\r\n        if (now < potentialStartTime) {\r\n            hasStarted = false;\r\n            return { i, hasStarted };\r\n        }\r\n\r\n        if (now < potentialEndTime) {\r\n            hasStarted = true;\r\n            return { i, hasStarted };\r\n        }\r\n    }\r\n    return { i: 0, hasStarted: false }; // Default\r\n}\r\n\r\n\r\nfunction to12HourFormat(timeStr) {\r\n    let [hours, minutes] = timeStr.split(\":\").map(Number);\r\n    hours = hours % 12 || 12; // Convert 0 hours to 12 for 12 AM\r\n    minutes = minutes < 10 ? '0' + minutes : minutes;\r\n    return `${hours}:${minutes}`;\r\n}\r\n\r\nwindow.advanceToNextPeriod = function() {\r\n    if (currentPeriodIndex < timePeriodMapping.length - 1) {\r\n        currentPeriodIndex++;\r\n        updatePeriod(false);  // Do not update index based on current time\r\n    }\r\n}\r\n\r\nwindow.advanceToPreviousPeriod = function() {\r\n    if (currentPeriodIndex > 0) {\r\n        currentPeriodIndex--;\r\n        updatePeriod(false);  // Do not update index based on current time\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * Initialize the countdown variables and start the tick function.\r\n */\r\nfunction initializeCountdown() {\r\n    countdown = document.getElementById(\"countdown__timer\");\r\n    now = new Date();\r\n    let currentPeriodInfo = getCurrentPeriodIndex();\r\n    currentPeriodIndex = currentPeriodInfo.i;\r\n    hasStarted = currentPeriodInfo.hasStarted;\r\n    updatePeriod();\r\n    tick();\r\n}\r\n\r\nlet selectedLunchType = null; // This will store the type of lunch selected, if any\r\n\r\nfunction updatePeriod(updateIndex = true) {\r\n    if (updateIndex) {\r\n        let currentPeriodInfo = getCurrentPeriodIndex();\r\n        currentPeriodIndex = currentPeriodInfo.i;\r\n        hasStarted = currentPeriodInfo.hasStarted;\r\n    }\r\n\r\n    let currentPeriodMapping = timePeriodMapping[currentPeriodIndex];\r\n\r\n    if (currentPeriodMapping) {\r\n        // Check if current period is \"Period 3 & Lunch\" and if a specific lunch type has been selected\r\n        if (currentPeriodMapping.periodName === \"Period 3 & Lunch\" && selectedLunchType) {\r\n            currentPeriodMapping = lunchTimings[selectedLunchType];\r\n        }\r\n\r\n        let [endHours, endMinutes] = currentPeriodMapping.endTime.split(\":\").map(Number);\r\n        endTime = new Date(now);\r\n        endTime.setHours(endHours, endMinutes, 0, 0);\r\n\r\n        document.getElementById(\"period__header\").textContent = currentPeriodMapping.periodName;\r\n        document.getElementById(\"period__time\").textContent = `${to12HourFormat(currentPeriodMapping.startTime)} - ${to12HourFormat(currentPeriodMapping.endTime)}`;\r\n\r\n        let [startHours, startMinutes] = currentPeriodMapping.startTime.split(\":\").map(Number);\r\n        let periodStartTime = new Date(now);\r\n        periodStartTime.setHours(startHours, startMinutes, 0, 0);\r\n\r\n        let lunchButtons = document.getElementById(\"lunch\");\r\n        if (currentPeriodMapping.periodName === \"Period 3 & Lunch\" || currentPeriodMapping === lunchTimings[selectedLunchType]) {\r\n            lunchButtons.classList.remove(\"hidden\");\r\n        } else {\r\n            lunchButtons.classList.add(\"hidden\");\r\n        }\r\n\r\n        updateProgressBar(periodStartTime, endTime);\r\n    } else {\r\n        endTime = new Date(now);\r\n        document.getElementById(\"period__header\").textContent = \"Not School Hours\";\r\n        document.getElementById(\"period__time\").textContent = \"\";\r\n    }\r\n\r\n    if (hasStarted) {\r\n        let [endHours, endMinutes] = currentPeriodMapping.endTime.split(\":\").map(Number);\r\n        endTime = new Date(now);\r\n        endTime.setHours(endHours, endMinutes, 0, 0);\r\n    } else {\r\n        let [startHours, startMinutes] = currentPeriodMapping.startTime.split(\":\").map(Number);\r\n        endTime = new Date(now);\r\n        endTime.setHours(startHours, startMinutes, 0, 0);\r\n    }\r\n\r\n    // Update gallery dots\r\n    let gallery = document.getElementById(\"period__gallery\");\r\n    gallery.innerHTML = \"\"; // Clear existing dots\r\n\r\n    for (let i = 0; i < timePeriodMapping.length; i++) {\r\n        let dot = document.createElement(\"div\");\r\n        dot.className = \"gallery-dot\";\r\n\r\n        // Mark the active dot based on the current period\r\n        if (i === currentPeriodIndex) {\r\n            dot.classList.add(\"active\");\r\n        }\r\n\r\n        gallery.appendChild(dot);\r\n    }\r\n}\r\n\r\nfunction updateProgressBar(periodStartTime, periodEndTime) {\r\n    const totalDuration = periodEndTime - periodStartTime;\r\n    const elapsedDuration = now - periodStartTime;\r\n\r\n    // Calculate the percentage of time elapsed\r\n    const progressPercentage = (elapsedDuration / totalDuration) * 100;\r\n\r\n    // Set the width of the progress bar\r\n    document.getElementById(\"countdown__progress\").style.width = `${progressPercentage}%`;\r\n}\r\n\r\nwindow.chooseLunch = function(lunchType, buttonElement) {\r\n    // Get all lunch buttons\r\n    let allLunchButtons = document.querySelectorAll(\"#lunch__choose .container\");\r\n\r\n    // If the button clicked is already selected\r\n    if (buttonElement.classList.contains(\"selected\")) {\r\n        // Deselect the button\r\n        buttonElement.classList.remove(\"selected\");\r\n        // Reset the selected lunch type\r\n        selectedLunchType = null;\r\n    } else {\r\n        // If another button was previously selected, deselect it\r\n        allLunchButtons.forEach(btn => btn.classList.remove(\"selected\"));\r\n\r\n        // Mark the clicked button as selected\r\n        buttonElement.classList.add(\"selected\");\r\n        // Set the selected lunch type\r\n        selectedLunchType = lunchType;\r\n    }\r\n\r\n    // Update the period to reflect the changes\r\n    updatePeriod();\r\n}\r\n\r\n\r\n\r\n/**\r\n * updates the current time and countdown timer\r\n */\r\nfunction updateClock() {\r\n    now = new Date();\r\n    let timeRemaining;\r\n\r\n    if (hasStarted) {\r\n        timeRemaining = (endTime - now) / 1000; // in seconds\r\n    } else {\r\n        timeRemaining = (endTime - now) / 1000; // in seconds\r\n    }\r\n\r\n    if (timeRemaining <= 0) {\r\n        updatePeriod(true);  // Update index based on current time\r\n        return; // Exit this function and wait for the next tick\r\n    }\r\n\r\n    // If the countdown has expired, update the period\r\n    if (timeRemaining <= 0) {\r\n        let currentPeriodInfo = getCurrentPeriodIndex();\r\n        currentPeriodIndex = currentPeriodInfo.i;\r\n        hasStarted = currentPeriodInfo.hasStarted;  // update this line\r\n        updatePeriod();\r\n        return; // Exit this function and wait for the next tick\r\n    }\r\n\r\n    // Calculate hours, minutes, seconds\r\n    let hours = Math.floor(timeRemaining / 3600);\r\n    timeRemaining %= 3600;\r\n    let minutes = Math.floor(timeRemaining / 60);\r\n    let seconds = Math.floor(timeRemaining % 60);\r\n\r\n    // Display time\r\n    if (hours > 0) {\r\n        countdown.textContent = `${hours}:${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\r\n    } else {\r\n        countdown.textContent = `${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\r\n    }\r\n\r\n    // Update the progress bar\r\n    let currentPeriodMapping = timePeriodMapping[currentPeriodIndex];\r\n    if (currentPeriodMapping) {\r\n        let [startHours, startMinutes] = currentPeriodMapping.startTime.split(\":\").map(Number);\r\n        let periodStartTime = new Date(now);\r\n        periodStartTime.setHours(startHours, startMinutes, 0, 0);\r\n        updateProgressBar(periodStartTime, endTime);\r\n    }\r\n}\r\n\r\n\r\n\r\n// main loop\r\nfunction tick() {\r\n    updateClock();\r\n    requestAnimationFrame(tick);\r\n}\r\n\r\nwindow.addEventListener(\"DOMContentLoaded\", initializeCountdown);\r\n"]}