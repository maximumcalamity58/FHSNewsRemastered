{"version":3,"sources":["js/clockv4.js"],"names":["countdown","endTime","now","Date","timePeriodMapping","startTime","periodName","lunchTimings","currentPeriodIndex","getCurrentPeriodIndex","i","length","_timePeriodMapping$i$2","_slicedToArray","split","map","Number","endHours","endMinutes","potentialEndTime","setHours","to12HourFormat","timeStr","_timeStr$split$map2","hours","minutes","concat","initializeCountdown","document","getElementById","updatePeriod","tick","window","advanceToNextPeriod","console","log","advanceToPreviousPeriod","selectedLunchType","currentPeriodMapping","_currentPeriodMapping2","textContent","_currentPeriodMapping4","startHours","startMinutes","periodStartTime","lunchButtons","contains","classList","remove","add","updateProgressBar","periodEndTime","progressPercentage","style","width","updateClock","timeRemaining","setDate","getDate","Math","floor","seconds","_currentPeriodMapping6","requestAnimationFrame","chooseLunch","lunchType","buttonElement","allLunchButtons","querySelectorAll","forEach","btn","addEventListener"],"mappings":"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","file":"clockv4.9f477fe1.js","sourceRoot":"..","sourcesContent":["/**\r\n * @fileoverview This file updates the current time as a simple countdown.\r\n * @version August 25, 2023\r\n * @authors Maxime Hendryx-Parkerp\r\n **/\r\n\r\nvar countdown;\r\nvar now = new Date();\r\nvar endTime;\r\n\r\nvar timePeriodMapping = [\r\n    { startTime: \"08:30\", endTime: \"09:53\", periodName: \"Period 1\" },\r\n    { startTime: \"09:53\", endTime: \"10:01\", periodName: \"Passing Period\" },\r\n    { startTime: \"10:01\", endTime: \"11:24\", periodName: \"Period 2\" },\r\n    { startTime: \"11:24\", endTime: \"13:24\", periodName: \"Period 3 & Lunch\" },\r\n    { startTime: \"13:24\", endTime: \"13:32\", periodName: \"Passing Period\" },\r\n    { startTime: \"13:32\", endTime: \"15:00\", periodName: \"Period 4\" }\r\n];\r\n\r\nvar lunchTimings = {\r\n    \"A\": { startTime: \"11:24\", endTime: \"11:54\", periodName: \"Period 3 & A Lunch\" },\r\n    \"B\": { startTime: \"11:54\", endTime: \"12:24\", periodName: \"Period 3 & B Lunch\" },\r\n    \"C\": { startTime: \"12:24\", endTime: \"12:54\", periodName: \"Period 3 & C Lunch\" },\r\n    \"D\": { startTime: \"12:54\", endTime: \"13:24\", periodName: \"Period 3 & D Lunch\" },\r\n};\r\n\r\n\r\n// At the top of the file\r\nlet currentPeriodIndex = getCurrentPeriodIndex();\r\n\r\nfunction getCurrentPeriodIndex() {\r\n    for (let i = 0; i < timePeriodMapping.length; i++) {\r\n        let [endHours, endMinutes] = timePeriodMapping[i].endTime.split(\":\").map(Number);\r\n        let potentialEndTime = new Date(now);\r\n        potentialEndTime.setHours(endHours, endMinutes, 0, 0);\r\n\r\n        if (now < potentialEndTime) {\r\n            return i;\r\n        }\r\n    }\r\n    return 0; // Default to the first period if no matching period found\r\n}\r\n\r\nfunction to12HourFormat(timeStr) {\r\n    let [hours, minutes] = timeStr.split(\":\").map(Number);\r\n    hours = hours % 12 || 12; // Convert 0 hours to 12 for 12 AM\r\n    minutes = minutes < 10 ? '0' + minutes : minutes;\r\n    return `${hours}:${minutes}`;\r\n}\r\n\r\nwindow.advanceToNextPeriod = function() {\r\n    console.log(\"e\")\r\n    if (currentPeriodIndex < timePeriodMapping.length - 1) {\r\n        currentPeriodIndex++;\r\n        updatePeriod();\r\n    }\r\n}\r\n\r\nwindow.advanceToPreviousPeriod = function() {\r\n    if (currentPeriodIndex > 0) {\r\n        currentPeriodIndex--;\r\n        updatePeriod();\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Initialize the countdown variables and start the tick function.\r\n */\r\nfunction initializeCountdown() {\r\n    countdown = document.getElementById(\"countdown__timer\");\r\n    now = new Date();\r\n    updatePeriod();\r\n    tick();\r\n}\r\n\r\nlet selectedLunchType = null; // This will store the type of lunch selected, if any\r\n\r\nfunction updatePeriod() {\r\n    let currentPeriodMapping = timePeriodMapping[currentPeriodIndex];\r\n\r\n    if (currentPeriodMapping) {\r\n        // Check if current period is \"Period 3 & Lunch\" and if a specific lunch type has been selected\r\n        if (currentPeriodMapping.periodName === \"Period 3 & Lunch\" && selectedLunchType) {\r\n            currentPeriodMapping = lunchTimings[selectedLunchType];\r\n        }\r\n\r\n        let [endHours, endMinutes] = currentPeriodMapping.endTime.split(\":\").map(Number);\r\n        endTime = new Date(now);\r\n        endTime.setHours(endHours, endMinutes, 0, 0);\r\n\r\n        document.getElementById(\"period__header\").textContent = currentPeriodMapping.periodName;\r\n        document.getElementById(\"period__time\").textContent = `${to12HourFormat(currentPeriodMapping.startTime)} - ${to12HourFormat(currentPeriodMapping.endTime)}`;\r\n\r\n        let [startHours, startMinutes] = currentPeriodMapping.startTime.split(\":\").map(Number);\r\n        let periodStartTime = new Date(now);\r\n        periodStartTime.setHours(startHours, startMinutes, 0, 0);\r\n\r\n        let lunchButtons = document.getElementById(\"lunch\");\r\n        if (currentPeriodMapping.periodName.contains(\"Period 3\")) {\r\n            lunchButtons.classList.remove(\"hidden\");\r\n        } else {\r\n            lunchButtons.classList.add(\"hidden\");\r\n        }\r\n\r\n        updateProgressBar(periodStartTime, endTime);\r\n    } else {\r\n        endTime = new Date(now);\r\n        document.getElementById(\"period__header\").textContent = \"Not School Hours\";\r\n        document.getElementById(\"period__time\").textContent = \"\";\r\n    }\r\n}\r\n\r\nfunction updateProgressBar(periodStartTime, periodEndTime) {\r\n    const totalDuration = periodEndTime - periodStartTime;\r\n    const elapsedDuration = now - periodStartTime;\r\n\r\n    // Calculate the percentage of time elapsed\r\n    const progressPercentage = (elapsedDuration / totalDuration) * 100;\r\n\r\n    // Set the width of the progress bar\r\n    document.getElementById(\"countdown__progress\").style.width = `${progressPercentage}%`;\r\n}\r\n\r\nwindow.chooseLunch = function(lunchType, buttonElement) {\r\n    // Get all lunch buttons\r\n    let allLunchButtons = document.querySelectorAll(\"#lunch__choose .container\");\r\n\r\n    // If the button clicked is already selected\r\n    if (buttonElement.classList.contains(\"selected\")) {\r\n        // Deselect the button\r\n        buttonElement.classList.remove(\"selected\");\r\n        // Reset the selected lunch type\r\n        selectedLunchType = null;\r\n    } else {\r\n        // If another button was previously selected, deselect it\r\n        allLunchButtons.forEach(btn => btn.classList.remove(\"selected\"));\r\n\r\n        // Mark the clicked button as selected\r\n        buttonElement.classList.add(\"selected\");\r\n        // Set the selected lunch type\r\n        selectedLunchType = lunchType;\r\n    }\r\n\r\n    // Update the period to reflect the changes\r\n    updatePeriod();\r\n}\r\n\r\n\r\n\r\n/**\r\n * updates the current time and countdown timer\r\n */\r\nfunction updateClock() {\r\n    now = new Date();\r\n    let timeRemaining = (endTime - now) / 1000; // in seconds\r\n\r\n    // If the countdown has expired, update the period\r\n    if (timeRemaining <= 0) {\r\n        // Adjust endTime to the next day's end time\r\n        endTime.setDate(endTime.getDate() + 1);\r\n        timeRemaining = (endTime - now) / 1000;\r\n    }\r\n\r\n    // Calculate hours, minutes, seconds\r\n    let hours = Math.floor(timeRemaining / 3600);\r\n    timeRemaining %= 3600;\r\n    let minutes = Math.floor(timeRemaining / 60);\r\n    let seconds = Math.floor(timeRemaining % 60);\r\n\r\n    // Display time\r\n    if (hours > 0) {\r\n        countdown.textContent = `${hours}:${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\r\n    } else {\r\n        countdown.textContent = `${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\r\n    }\r\n\r\n    // Update the progress bar\r\n    let currentPeriodMapping = timePeriodMapping[currentPeriodIndex];\r\n    if (currentPeriodMapping) {\r\n        let [startHours, startMinutes] = currentPeriodMapping.startTime.split(\":\").map(Number);\r\n        let periodStartTime = new Date(now);\r\n        periodStartTime.setHours(startHours, startMinutes, 0, 0);\r\n        updateProgressBar(periodStartTime, endTime);\r\n    }\r\n}\r\n\r\n\r\n// main loop\r\nfunction tick() {\r\n    updateClock();\r\n    requestAnimationFrame(tick);\r\n}\r\n\r\nwindow.addEventListener(\"DOMContentLoaded\", initializeCountdown);\r\n"]}